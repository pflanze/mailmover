#!/usr/bin/perl -wT
# ^- risk T  starting from Sun, 24 Oct 2004 22:50:45 +0200

# NOTES:
# - "sourceforge" subject clipping code is only active when delivering to maildir.


# Sam Nov 29 23:17:06 MET 2003
(my $email='pflanze%gmx,ch')=~ tr/%,/@./;

use strict;

use constant DEBUG=> ($ENV{DEBUG} ? 1 : 0); # conditional needed for detainting
use Carp;
use Chj::Backtrace;
use Chj::WithRepl qw(push_withrepl WithRepl_eval);

push_withrepl (0) if DEBUG;

use Scalar::Util 'tainted';

use Chj::xopendir;
use Chj::xperlfunc 'xlinkunlink';
my $do_send_autoreply;
BEGIN{
    $do_send_autoreply=0;#

    $0=~ /(.*?)([^\/]+)\z/s or die "?";
    my ($mydir, $myname)=($1,$2);
    ##is this safe? should bi right?
    require "$mydir/mailmoverlib.pm";
    require "$mydir/mailmover_autoreply.pm" if $do_send_autoreply;
    my ($home)= $ENV{HOME}=~ m{^(/home/\w+)/?\z}
      or die "weird HOME: '$ENV{HOME}'";
    require "$home/.mailmover_config.pl"; # needs to define is_own_emailaddress; XXX hack.
}
use Chj::xtmpfile;
use Chj::singlequote;
use Chj::chompspace;
use Chj::Path::Truncator::MD5;
use Chj::xsysopen 'xsysopen_excl';
use Chj::xopen 'xopen_read';

# wann will ich eigentlich msgid recorden wirklich?, wann will ich double elimination/checks? normalerweise ja nicht?. (doubleelim bloss wenn sie im gleichen folder landen).(NA oder  wenn notiz und das doppel beide im infolder landen dann auch, oder?, oder notiz unterdrucken dann? eh isch jo eh unterdrückt dann. na, aber dann später wenn die reply aus ml eintrifft, DANN die notiz unterdrücken wär was)

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname -d sourcedir | -f sourcefile(s)  targetbase

  Options:
  -d|--dir  path      take all files inside sourcedir
  -f|--files  files   take given files
  --stdin             read mail from stdin
  --leave-inbox       xxx
  -l|--loop-every n   keep running: sleep n seconds then scan again.
  --repeat n          only loop n times, then end. (to prevent memoryleaks from becoming awful, or for test runs with Devel::LeakTrace)

  -m|--maildir        work with maildirs, not just plain dirs

  --ham               mail(s) is/are ham, ignore X-Spam-Status headers

  '/filtered' is appended to targetbase to get the real target
  directory if -m option is not given.

  (Christian Jaeger <$email>)
";
exit @_ ? 1 : 0;
}

my @args;
my $DEBUG=0;
my $verbose=0;
my ($sourcedir);
my ($opt_leaveinbox,
    $opt_loop,
    $opt_repeat,
    $opt_is_ham,
    $opt_maildirs,
    $opt_files,
    $opt_stdin);
for (my $i=0; $i<=$#ARGV; $i++) {
    local $_=$ARGV[$i];
    if (/^--?h(elp)?$/) {
    	usage
    } elsif ($_ eq '--') {
    	push @args, @ARGV[$i+1..$#ARGV];
    	last;
    } elsif (/^--?d(?:dir(?:=(.*))?)?$/) {
        if (defined $1) {
            $sourcedir=$1
        } else {
            $sourcedir=$ARGV[++$i] or usage "missing argument for '$_' option";
        }
    } elsif (/^--?l(?:oop-every(?:=(.*))?)?$/) {
        if (defined $1) {
            $opt_loop=$1
        } else {
            $opt_loop=$ARGV[++$i]
        }
	$opt_loop+=0;
	$opt_loop or usage "missing argument for '$_' option";
    } elsif (/^--?d(ebug)?$/) {
	$DEBUG=1;
    } elsif (/^--leave-inbox$/) {
	$opt_leaveinbox=1;
    } elsif (/^--repeat(?:=(.*))?$/) {
        if (defined $1) {
            $opt_repeat=$1
        } else {
            $opt_repeat=$ARGV[++$i]
        }
	$opt_repeat+=0;
	$opt_repeat or usage "missing argument for '$_' option";
    } elsif (/^--maildirs?$/ or /^-m$/) {
	$opt_maildirs=1;
    } elsif (/^--?(v+)(?:erbose)?$/) {
	$verbose+=length($1);
    } elsif (/^--files$/) {
	$opt_files=1;
    } elsif (/^--stdin$/) {
	$opt_stdin=1;
    } elsif (/^--ham$/) {
	$opt_is_ham=1;
    } elsif (/^-./) {
    	usage("Unknown option '$_'\n");
    } else {
    	push @args, $_
    }
}
usage unless @args;

usage "give exactly one of --stdin / --files / --dir"
  unless (($opt_stdin or $opt_files or $sourcedir) and
	  not (($opt_files and $opt_stdin)
	       or
	       ($opt_files and $sourcedir)
	       or
	       ($opt_stdin and $sourcedir))); #of course that should be left as an exercise for the reader to clean up into an autocomputable generatable whatever form.

usage "don't give files unless --files is given"
  if (@args > 1 and not $opt_files);

usage "--repeat requires --loop-every" if $opt_repeat and not $opt_loop;

my $targetbase= do {
    my $p= pop @args;
    # detaint it - trust it.
    $p=~ m|^([^~].*)|s or die "invalid path starting with a tilde: '$p'";
    $1
};
my $targetbase_messages= $targetbase;

our $maildirbasefolder;#only set if in maildir mode
if ($opt_maildirs) {
    require Chj::Maildir::Basefolder;
    require Chj::Maildir::Subfolder;
    $maildirbasefolder= Chj::Maildir::Basefolder->new ($targetbase);
    $maildirbasefolder->create (1);
} else {
    $targetbase = "$targetbase/filtered"; # Hacky, but documented in the usage
}


my $truncator= Chj::Path::Truncator::MD5->new($targetbase,3);

my @warns;

unless (DEBUG) {
    $SIG{__WARN__}=sub{push @warns,"Warning:\n".(Carp::longmess @_)};
}

{
    # deliver warn mail. one per mailmover call also. im gegensatz zu chris wo eins per email.
    # {Mon Aug 13 12:07:01 2007} hmm: heisst das  dass eine warnmail delivered wird mit msgs von mehreren in mails ? nein. writewarnmail wird jedesmail sep aufgerufen unten und @warns gelöscht.(wie imperativ)

    my $base;

    sub writewarnmail {
	my ($subj,$data)=@_;
	eval {
	    require Chj::Sendmail;
	    require Chj::Maildir::Basefolder;
	    1
	} or die "wanted to send mailasstring '$subj' but: $@";
	$base ||= Chj::Maildir::Basefolder->new($targetbase_messages);
	my $mail = Chj::Sendmail::prepare_mailasstring(To=>"you",
						       From=>"$myname",
						       Subject=>"$subj",
						       Data=>"$data");
	my $warnfile = xtmpfile Chj::IO::Tempfile "$targetbase_messages/tmp/"; # Chj::Maildir is still missing 'real' delivery functionality ?  <-{Mon Aug 13 11:55:03 2007}
	$warnfile->xprint($mail);
	$warnfile->xclose;
	$base->deliver_file($warnfile->path);
    }
}

sub Maybe_take_filename ( $ ) { # take filename iff it is looking like a maildir file
    my ($filepath)=@_;
    $filepath=~ s|.*/||s;
    if ($filepath=~ /^(\d{9,10}\.[^.]+\..*)/s) {
	$1
    } else {
	# (otherwise let the caller let generate a new proper one)
	return
    }
}


sub conditional_move_file($ $ ) {
    my ($filepath,$targetbase)=@_;#(funny, dass ich $targetbase hier explizit übergebe "um unanständige globals" nicht zu benutzen.)
    $filepath= do {
	#untaint it. just trust it, it's coming from readdir or from arguments.
	$filepath=~ m|(.*)|s;
	$1;
    };
    my $filename=$filepath; $filename=~ s{^.*/}{}s;

    my $quotedsubject="(abgebrochen bevor subject geholt)";
    my $from;
    my $quotedfrom;
    my $quotedfoldername;
    $quotedfrom=$quotedfoldername="(abgebrochen bevor geholt)";
    WithRepl_eval {
	my ($mail,$foldername,$type,$important)=
	  analyze_file ($filepath, undef, $opt_is_ham);
	$quotedsubject= singlequote($mail->decodedheader("subject"),"(kein subject)");
	$from=$mail->decodedheader("From");
	$quotedfrom= singlequote $from;
	$quotedfoldername= singlequote $foldername;

	my $targetfolder_is_symlink;
	#warn "foldername outside: '$foldername'";
	if ($foldername) {
	    if ($opt_maildirs) {
		my $make_sub= sub {
		    my ($foldername, $flag_sourceforge_original)=@_;
		    #warn "foldername='$foldername', flag_sourceforge_original=$flag_sourceforge_original";
		    if ($foldername eq "inbox"
			#or
			#$foldername eq "inbox-big"
		       ) {
			$maildirbasefolder
		    } else {
			# hacky / should be an option?
			$type="" if $type eq "unbekannt";
			$foldername=
			  $flag_sourceforge_original ? "Moved/$type/original/$foldername"
			    : "Moved/$type/$foldername";
			#/hacky
			my @pathparts= split /\/+/, $foldername; # does it ever happen ?.
			my $sub= $maildirbasefolder;
			for (@pathparts) {
			    next unless length;
			    $sub= Chj::Maildir::Subfolder->new ($sub,$_);
			}
			$sub->create(1)
			  and warn "created new folder '$foldername'\n";# vielleicht in subject schreiben besser!!todo.
			$sub
		    }
		};
		my $deliver= sub {
		    my ($filepath,$sub,$maybe_filename)=@_;
		    $sub->deliver_file ($filepath, $maybe_filename || Maybe_take_filename($filepath));
		};
		if ($type eq "sourceforge") {
		    &$deliver($filepath,  &$make_sub($foldername, 1));

		    # isnt't it hacky: in mailmoverlib I've got the head in memory anyway. hm.
		    my $in= xopen_read $filepath;
		    my $t= xtmpfile "$targetbase/tmp/";# don't forget the slash at the end!!!!!
		    my $originator= do {
			my $By;
			while (<$in>) {
			    if (/^$/) {
				for (1..10) {
				    $_=<$in>; last unless defined $_;
				    if (($By)= /^By:\s*(\S+)/) {
					last;
				    }
				}
				last;
			    }
			}
			$By
		    };
		    #warn "originator='$originator'";
		    $in->xrewind;
		    while (<$in>) {
			if (/^$/) {
			    $t->xprint ($_);
			    while (<$in>) {
				$t->xprint ($_);
			    }
			    last;
			} else {
			    (s/^(subject:\s*)\[[^\]]+\]\s*(.*)/$1$2/si
			     or
			     s/^(from:\s*)(.*)/
				 my ($pre,$adr)=($1,$2);
				 if ($originator) {
				     $adr=~ s{"[^\"]*"}{"$originator"};
				 }
				 $pre.$adr
			     /ei);
			    $t->xprint ($_);
			}
		    }
		    $in->xclose;
		    $t->xclose;
		    #warn "t->path is '".$t->path."'";
		    &$deliver($t->path, &$make_sub($foldername, 0), Maybe_take_filename($filepath));
		} else {
		    &$deliver($filepath, &$make_sub($foldername, 0));
		}
		# do i have to unlink $filepath afterwards? yes. (unless it will be unlinked anyway of course)
		xunlink $filepath;
	    } else {
		$foldername=~ s{/}{--}sg;#!wichtig!.. nochmals.
		$foldername= "dot.$foldername" if $foldername=~ /^\./;#cj 2.8.04, auch noch relevant.

		# und, ganz wichtig ha:
		$foldername= $truncator->trunc($foldername);

		my $targetfolder= "$targetbase/$foldername";
		if (! -d $targetfolder) {
		    xmkdir $targetfolder;
		    warn "created new folder '$targetfolder'\n";# vielleicht in subject schreiben besser!!todo.
		}else {
		    $targetfolder_is_symlink= readlink $targetfolder ;# or do{ $!== E.... or..
		}

		#warn "tainted" if tainted $targetfolder;# is ok
		warn "tainted" if tainted $filename;
		my $targetpath= "$targetfolder/$filename";
		xlinkunlink($filepath,$targetpath);
		warn "moved '$filename' to '$targetpath'\n" if $verbose;
	    }
	} else {
	    warn "'$filename' not moved\n" if $verbose;
	}

	# aha und nun noch die dinger, warnmeldungen und so und dass inreplytoeigenemail.

	# Replydings immer machen wenn es "zu filtern ist und zwar nicht in type inbox". Dann ist es nämlich nicht direkt an mich addressiert.  Und das ist egal ob die box dann symlinked ist (oder  type gleich aber  xyz)
	my $already_warned;
	if ($type ne 'inbox'
	    #and not ($targetfolder_is_symlink
	    #	     and $targetfolder_is_symlink=~ /(?:inbox|new)/) # also wenn ichs eh in die inbox krieg, nix mehr dazu sagen eben. schlau?
	   ) {
	    if ($from) {
		if (is_own_emailaddress($from)) {
		    save_is_own($mail);
		}
		elsif (is_reply($mail)){
		    writewarnmail("Antwort: $quotedsubject",
				  "Antwort auf deinen thread,\n".
				  "     From $quotedfrom\n".
				  "  Subject $quotedsubject\n".
				  "in folder $quotedfoldername eingetroffen.\n");
		    $already_warned=1;#leicht murksig
		}
	    }
	}
	if ($important and !$already_warned){
	    writewarnmail(($foldername=~/inbox-big/ ? "Big":"Wichtig").": $quotedsubject",
			  "Email mit\n".
			  "     From $quotedfrom\n".
			  "  Subject $quotedsubject\n".
			  "in folder $quotedfoldername eingetroffen.\n");
	}

	# autoreply senden:
	if ($do_send_autoreply) {
	    #if ($type eq 'inbox') { ach, Cron mails und solches isch dann auch dabei.
	    if ($foldername eq 'inbox' or $foldername eq 'inbox-big') {
		# can we be sure that hier kein email hin kommt das bulk header hat, zB selber ne autoreply isch?.
		# nein: wenn es keine der %known_list_precedences ist (well wär mir egal), oder resent-from fehlt und nicht sender owner-xyz dings isch, dann würde es nid gefiltert werden obwohl es precedence header hat. also hier explizit checken:
		if (do{# bulkiges email
		    #if (my $precedence= chompspace($mail->header("precedence"))) {##ps erscht hier mach ich chompspace, in mailmoverlib nicht!!  EHR das mach ich bei headers EH.  hatt ich das nich schon als unschön taxiert.   ACH und dann auch noch undef Fall.
		    if (my $precedence= $mail->header("precedence")) {
			#if (exists $MailHead::known_list_precedences{$precedence}) { eh isch dort lexical.
			if (lc($precedence) eq 'bulk'
			    or
			    lc($precedence) eq 'list'){
			    1
			} elsif (lc($precedence) eq 'junk') {#nöd = !
			    1
			} else {
			    0
			}
		    } else {
			0
		    }
		}) {
		    #warn "not filtered but still bulkiges email";
		} else {
		    # und ehrlich kein autoreply?
		    unless ($mail->lookslike_autoreply) {
			unless (do {
			    if (defined(my $spamscore=$mail->spamscore)) {
				$spamscore >= 0.5
			    } else {
				#(huh, ein mail ohne spamscore angabe?)
				undef
			    }
			}) {
			    my $senderaddress= $mail->decodedheader("from");
			    # ^- aber  extrahieren und so   hab ich doch auch schon gemacht  für sms dings   ah kann einfach volles Teil schicken  mit der EL::Util::Sendmail library 'offenbar'.
			    autoreply::send_if_not_already($senderaddress,
							   'christian.jaeger@ethlife.ethz.ch',
							   scalar $mail->decodedheader("subject"))
				and warn "sent autoreply\n";
			}
		    }
		}
	    }
	}
	1
    } || do {
	if (DEBUG) {
	    die $@
	}
    };
    push @warns, "Error/exception:\n".$@ if $@;

    writewarnmail("warnings for email $quotedsubject",
		  "warnings for email:\n".
		  "     From $quotedfrom\n".
		  "  Subject $quotedsubject\n".
		  "put to folder $quotedfoldername\n".
		  join "\n",@warns) if @warns;
    @warns=();#!!!!!!!!!!!!!!!!
}

# main:

$|=1;

usage "only one source dir argument allowed" if $sourcedir and @args;

if ($sourcedir) {
    DO: {
	my $d= xopendir $sourcedir;
	while(defined(my$item=$d->xnread)){
	    conditional_move_file("$sourcedir/$item",$targetbase);
	}
	if ($opt_loop) {
	    sleep $opt_loop;
	    print STDERR "$myname: redoiing\n" if $DEBUG;
	    if (defined $opt_repeat) {
		redo DO if --$opt_repeat;
	    } else {
		redo DO
	    }
	}
    }
}
elsif ($opt_files) {
    for my $filepath (@args) {
	conditional_move_file($filepath,$targetbase);
    }
}
elsif ($opt_stdin) {
    if ($opt_maildirs) {
	my $path= "$targetbase/tmp/".$maildirbasefolder->create_filename;
	WithRepl_eval {
	    my $t= xsysopen_excl $path, 0600;
	    my $in= bless *STDIN{IO},"Chj::IO::File";
	    $in->xsendfile_to($t);
	    $in->xclose;
	    #require IO::Handle; for IO::Handle::sync  uff. and I wanted to avoid the bloat..
	    #but so be it.
	    $t->xflush; # must flush before sync.
	    require IO::Handle;
	    IO::Handle::sync ($t) or die "IO::Handle::sync: $!";
	    $t->xclose; # must close *after* sync. of course.
	    conditional_move_file ($path,$targetbase);
	    1
	} || do {
	    my $e=$@;
	    unlink $path; # sort of tmpfile functionality recovery
	    die $e
	};
    } else {
	die "delivery from stdin only implemented for --maildirs"
    }
}
else {
    die "bug" # should have been trapped earlier
}
